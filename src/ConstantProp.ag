{
import Std (liftA2)
}

attr Program' Procs' Proc' Stat'    [ | | constantPropagation :: { DifTrans PtConstLat } ]
attr IExpr BExpr Expr               [ | | constantPropagation :: { ConstEnv -> Maybe ConstLat } ]
attr Exprs                          [ | | constantPropagation use {:} {[]} :: { [ConstEnv -> Maybe ConstLat] }  ]  

sem Program'
  | Program'
    lhs.constantPropagation = @procs.constantPropagation <> @stat.constantPropagation

sem Procs'
  | Nil
    lhs.constantPropagation = mempty
  | Cons
    lhs.constantPropagation = @hd.constantPropagation <> @tl.constantPropagation

sem Proc'
  | Proc'
    lhs.constantPropagation = insertL @labelEntry id $ insertL @labelExit id @stat.constantPropagation

sem Stat'
  | Skip'
    lhs.constantPropagation = singleL @label id
  | IfThenElse'
    lhs.constantPropagation = insertL @labelc id $ @stat1.constantPropagation <> @stat2.constantPropagation 
  | While'
    lhs.constantPropagation = insertL @labelc id @stat.constantPropagation
  | Print'
    lhs.constantPropagation = singleL @label id
  | Call'
    lhs.constantPropagation = insertL @labelCall (fmap $ callConst (procInp @loc.proc) (procOut @loc.proc) @params.constantPropagation) $ singleR @labelReturn (liftA2 $ retConst @out (procInp @loc.proc) (procOut @loc.proc))
  | IAssign'
    lhs.constantPropagation = singleL @label (fmap $ updateConst @name @val.constantPropagation)
  | BAssign'
    lhs.constantPropagation = singleL @label (fmap $ updateConst @name @val.constantPropagation)
  | Seq'
    lhs.constantPropagation = @stat1.constantPropagation <> @stat2.constantPropagation
  | Malloc'
    lhs.constantPropagation = singleL @label id
  | Free'
    lhs.constantPropagation = singleL @label id
  | RefAssign'
    lhs.constantPropagation = singleL @label id
  | Continue'
    lhs.constantPropagation = singleL @label id
  | Break'
    lhs.constantPropagation = singleL @label id

sem IExpr
  | IConst
    lhs.constantPropagation = \_ -> Just $ CI @val
  | Var
    lhs.constantPropagation = getConst @name
  | Plus
    lhs.constantPropagation = \env -> cIII (+) (@left.constantPropagation env) (@right.constantPropagation env)
  | Minus
    lhs.constantPropagation = \env -> cIII (-) (@left.constantPropagation env) (@right.constantPropagation env)
  | Times
    lhs.constantPropagation = \env -> constMul (@left.constantPropagation env) (@right.constantPropagation env)
  | Divide
    lhs.constantPropagation = \env -> cIII div (@left.constantPropagation env) (@right.constantPropagation env)
  | Deref
  
sem BExpr
  | BConst
    lhs.constantPropagation = \_ -> Just $ CB @val
  | BVar
    lhs.constantPropagation = getConst @name
  | LessThan
    lhs.constantPropagation = \env -> cIIB (<) (@left.constantPropagation env) (@right.constantPropagation env)
  | GreaterThan
    lhs.constantPropagation = \env -> cIIB (>) (@left.constantPropagation env) (@right.constantPropagation env)
  | LessEqual
    lhs.constantPropagation = \env -> cIIB (<=) (@left.constantPropagation env) (@right.constantPropagation env)
  | GreaterEqual
    lhs.constantPropagation = \env -> cIIB (>=) (@left.constantPropagation env) (@right.constantPropagation env)
  | IEqual
    lhs.constantPropagation = \env -> cIIB (==) (@left.constantPropagation env) (@right.constantPropagation env)
  | BEqual
    lhs.constantPropagation = \env -> cBBB (==) (@left.constantPropagation env) (@right.constantPropagation env)
  | And
    lhs.constantPropagation = \env -> constAnd (@left.constantPropagation env) (@right.constantPropagation env)
  | Or
    lhs.constantPropagation = \env -> constOr (@left.constantPropagation env) (@right.constantPropagation env)
  | Not
    lhs.constantPropagation = \env -> cBB not (@val.constantPropagation env)
